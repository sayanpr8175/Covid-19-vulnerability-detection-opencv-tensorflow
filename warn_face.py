
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.models import load_model
from imutils.video import VideoStream
import numpy as np
import argparse
import imutils
import time
import cv2
import os

def detect_and_predict_mask(frame, faceNet, maskNet):
    	(h, w) = frame.shape[:2]
    	blob = cv2.dnn.blobFromImage(frame, 1.0, (300, 300), (104.0, 177.0, 123.0))

        faceNet.setInput(blob)
        detections = faceNet.forward()

        faces = []
        locs = []
        preds = []
        for i in range(0, detection.shape[2]):
            confidence = detections[0, 0, i, 2]
            if confidence > 0.5 :
                box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
                (startX, startY, endX, endY) = box.astype("int")
                (startX, startY) = (max(0, startX), max(0,startY))
                (endX, endY) = (min(w - 1, endX), min(h - 1, endY))
                face = frame[startY:endY, startX:endX]
                face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)
                face = cv.resize(face,(200,200))
                face = img_to_array(face)
                face = preprocess_input(face)
                face = np.expand_dims(face, axis=0)

                faces.append(face)
                locs.append((startX, startY, endX, endY))
        if len(faces) > 0:
            preds = masknet.predict(faces)
        return(locs, preds)

face = 'face_detector'
model = 'model.h5'
prototxtPath = os.path.sep.join([face,'deploy.prototxt'])
weightsPath = os.path.sep.join([face, 'res10_300x300_ssd_iter_140000.caffemodel'])
faceNet = cv2.dnn.readNet(prototxtPath, weightsPath)

maskNet = load_model(model)

vs = VideoStream(src=0).start()
time.sleep(2.0)

while True:
    frame = vs.read()
    frame = imutils.resize(frame, width=400)

    (locs, preds) = detect_and_predict_mask(frame, faceNet, maskNet)

    for (box, pred) in zip(locs, preds):
        (startX, startY, endX, endY) = box
        (mask, withoutMask) = pred

        label = "GOOD WEARED MaskY" id mask > withoutMask else "WARNING! WEAR MASK"

        color = (0, 255, 0) if label == "GOOD WEARED MaskY" else (0, 0, 255)

        label = "{}: {:.2f}%".format(label, max(mask, withoutMask) * 100)


        cv2.putText(frame, label, (startX, startY), (endX, endY), color, 2)

        cv2.imshow("Frame", frame)
        key = cv2.waitKey(1) & 0xFF

        if key == ord("q"):
            break

cv2.destroyAllWindows()
vs.stop()
